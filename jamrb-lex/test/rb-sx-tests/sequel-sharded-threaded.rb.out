((Token ((1 0) on_comment "# frozen-string-literal: true\n"))
 (Token ((2 0) on_ignored_nl "\n"))
 (Token ((3 0) on_ident "require"))
 (Token ((3 7) on_sp " "))
 (Token ((3 8) on_tstring_beg "'"))
 (Token ((3 9) on_tstring_content "sequel/connection_pool/threaded"))
 (Token ((3 40) on_tstring_end "'"))
 (Token ((3 41) on_nl "\n"))
 (Token ((4 0) on_ignored_nl "\n"))
 (Token
  ((5 0)
   on_comment
   "# The slowest and most advanced connection, dealing with both multi-threaded\n"))
 (Token
  ((6 0)
   on_comment
   "# access and configurations with multiple shards/servers.\n"))
 (Token ((7 0) on_comment "#\n"))
 (Token
  ((8 0)
   on_comment
   "# In addition, this pool subclass also handles scheduling in-use connections\n"))
 (Token
  ((9 0)
   on_comment
   "# to be removed from the pool when they are returned to it.\n"))
 (Token ((10 0) on_kw "class"))
 (Token ((10 5) on_sp " "))
 (Token ((10 6) on_const "Sequel"))
 (Token ((10 12) on_op "::"))
 (Token ((10 14) on_const "ShardedThreadedConnectionPool"))
 (Token ((10 43) on_sp " "))
 (Token ((10 44) on_op "<"))
 (Token ((10 45) on_sp " "))
 (Token ((10 46) on_const "Sequel"))
 (Token ((10 52) on_op "::"))
 (Token ((10 54) on_const "ThreadedConnectionPool"))
 (Token ((10 76) on_nl "\n"))
 (Token ((11 0) on_sp "  "))
 (Token
  ((11 2) on_comment "# The following additional options are respected:\n"))
 (Token ((12 0) on_sp "  "))
 (Token
  ((12 2)
   on_comment
   "# :servers :: A hash of servers to use.  Keys should be symbols.  If not\n"))
 (Token ((13 0) on_sp "  "))
 (Token
  ((13 2)
   on_comment
   "#             present, will use a single :default server.\n"))
 (Token ((14 0) on_sp "  "))
 (Token
  ((14 2)
   on_comment
   "# :servers_hash :: The base hash to use for the servers.  By default,\n"))
 (Token ((15 0) on_sp "  "))
 (Token
  ((15 2)
   on_comment
   "#                  Sequel uses Hash.new(:default).  You can use a hash with a default proc\n"))
 (Token ((16 0) on_sp "  "))
 (Token
  ((16 2)
   on_comment
   "#                  that raises an error if you want to catch all cases where a nonexistent\n"))
 (Token ((17 0) on_sp "  "))
 (Token ((17 2) on_comment "#                  server is used.\n"))
 (Token ((18 0) on_sp "  "))
 (Token ((18 2) on_kw "def"))
 (Token ((18 5) on_sp " "))
 (Token ((18 6) on_ident "initialize"))
 (Token ((18 16) on_lparen "("))
 (Token ((18 17) on_ident "db"))
 (Token ((18 19) on_comma ","))
 (Token ((18 20) on_sp " "))
 (Token ((18 21) on_ident "opts"))
 (Token ((18 25) on_sp " "))
 (Token ((18 26) on_op "="))
 (Token ((18 27) on_sp " "))
 (Token ((18 28) on_const "OPTS"))
 (Token ((18 32) on_rparen ")"))
 (Token ((18 33) on_ignored_nl "\n"))
 (Token ((19 0) on_sp "    "))
 (Token ((19 4) on_kw "super"))
 (Token ((19 9) on_nl "\n"))
 (Token ((20 0) on_sp "    "))
 (Token ((20 4) on_ivar "@available_connections"))
 (Token ((20 26) on_sp " "))
 (Token ((20 27) on_op "="))
 (Token ((20 28) on_sp " "))
 (Token ((20 29) on_lbrace "{"))
 (Token ((20 30) on_rbrace "}"))
 (Token ((20 31) on_nl "\n"))
 (Token ((21 0) on_sp "    "))
 (Token ((21 4) on_ivar "@connections_to_remove"))
 (Token ((21 26) on_sp " "))
 (Token ((21 27) on_op "="))
 (Token ((21 28) on_sp " "))
 (Token ((21 29) on_lbracket "["))
 (Token ((21 30) on_rbracket "]"))
 (Token ((21 31) on_nl "\n"))
 (Token ((22 0) on_sp "    "))
 (Token ((22 4) on_ivar "@servers"))
 (Token ((22 12) on_sp " "))
 (Token ((22 13) on_op "="))
 (Token ((22 14) on_sp " "))
 (Token ((22 15) on_ident "opts"))
 (Token ((22 19) on_period "."))
 (Token ((22 20) on_ident "fetch"))
 (Token ((22 25) on_lparen "("))
 (Token ((22 26) on_symbeg ":"))
 (Token ((22 27) on_ident "servers_hash"))
 (Token ((22 39) on_comma ","))
 (Token ((22 40) on_sp " "))
 (Token ((22 41) on_const "Hash"))
 (Token ((22 45) on_period "."))
 (Token ((22 46) on_ident "new"))
 (Token ((22 49) on_lparen "("))
 (Token ((22 50) on_symbeg ":"))
 (Token ((22 51) on_ident "default"))
 (Token ((22 58) on_rparen ")"))
 (Token ((22 59) on_rparen ")"))
 (Token ((22 60) on_nl "\n"))
 (Token ((23 0) on_ignored_nl "\n"))
 (Token ((24 0) on_sp "    "))
 (Token ((24 4) on_kw "if"))
 (Token ((24 6) on_sp " "))
 (Token ((24 7) on_const "USE_WAITER"))
 (Token ((24 17) on_nl "\n"))
 (Token ((25 0) on_sp "      "))
 (Token ((25 6) on_ivar "@waiter"))
 (Token ((25 13) on_sp " "))
 (Token ((25 14) on_op "="))
 (Token ((25 15) on_sp " "))
 (Token ((25 16) on_kw "nil"))
 (Token ((25 19) on_nl "\n"))
 (Token ((26 0) on_sp "      "))
 (Token ((26 6) on_ivar "@waiters"))
 (Token ((26 14) on_sp " "))
 (Token ((26 15) on_op "="))
 (Token ((26 16) on_sp " "))
 (Token ((26 17) on_lbrace "{"))
 (Token ((26 18) on_rbrace "}"))
 (Token ((26 19) on_nl "\n"))
 (Token ((27 0) on_sp "    "))
 (Token ((27 4) on_kw "end"))
 (Token ((27 7) on_nl "\n"))
 (Token ((28 0) on_ignored_nl "\n"))
 (Token ((29 0) on_sp "    "))
 (Token ((29 4) on_ident "add_servers"))
 (Token ((29 15) on_lparen "("))
 (Token ((29 16) on_lbracket "["))
 (Token ((29 17) on_symbeg ":"))
 (Token ((29 18) on_ident "default"))
 (Token ((29 25) on_rbracket "]"))
 (Token ((29 26) on_rparen ")"))
 (Token ((29 27) on_nl "\n"))
 (Token ((30 0) on_sp "    "))
 (Token ((30 4) on_ident "add_servers"))
 (Token ((30 15) on_lparen "("))
 (Token ((30 16) on_ident "opts"))
 (Token ((30 20) on_lbracket "["))
 (Token ((30 21) on_symbeg ":"))
 (Token ((30 22) on_ident "servers"))
 (Token ((30 29) on_rbracket "]"))
 (Token ((30 30) on_period "."))
 (Token ((30 31) on_ident "keys"))
 (Token ((30 35) on_rparen ")"))
 (Token ((30 36) on_sp " "))
 (Token ((30 37) on_kw "if"))
 (Token ((30 39) on_sp " "))
 (Token ((30 40) on_ident "opts"))
 (Token ((30 44) on_lbracket "["))
 (Token ((30 45) on_symbeg ":"))
 (Token ((30 46) on_ident "servers"))
 (Token ((30 53) on_rbracket "]"))
 (Token ((30 54) on_nl "\n"))
 (Token ((31 0) on_sp "  "))
 (Token ((31 2) on_kw "end"))
 (Token ((31 5) on_nl "\n"))
 (Token ((32 0) on_ignored_nl "\n"))
 (Token ((33 0) on_sp "  "))
 (Token
  ((33 2)
   on_comment
   "# Adds new servers to the connection pool. Primarily used in conjunction with master/slave\n"))
 (Token ((34 0) on_sp "  "))
 (Token
  ((34 2)
   on_comment
   "# or shard configurations. Allows for dynamic expansion of the potential slaves/shards\n"))
 (Token ((35 0) on_sp "  "))
 (Token
  ((35 2)
   on_comment
   "# at runtime. servers argument should be an array of symbols.\n"))
 (Token ((36 0) on_sp "  "))
 (Token ((36 2) on_kw "def"))
 (Token ((36 5) on_sp " "))
 (Token ((36 6) on_ident "add_servers"))
 (Token ((36 17) on_lparen "("))
 (Token ((36 18) on_ident "servers"))
 (Token ((36 25) on_rparen ")"))
 (Token ((36 26) on_ignored_nl "\n"))
 (Token ((37 0) on_sp "    "))
 (Token ((37 4) on_ident "sync"))
 (Token ((37 8) on_sp " "))
 (Token ((37 9) on_kw "do"))
 (Token ((37 11) on_ignored_nl "\n"))
 (Token ((38 0) on_sp "      "))
 (Token ((38 6) on_ident "servers"))
 (Token ((38 13) on_period "."))
 (Token ((38 14) on_ident "each"))
 (Token ((38 18) on_sp " "))
 (Token ((38 19) on_kw "do"))
 (Token ((38 21) on_sp " "))
 (Token ((38 22) on_op "|"))
 (Token ((38 23) on_ident "server"))
 (Token ((38 29) on_op "|"))
 (Token ((38 30) on_ignored_nl "\n"))
 (Token ((39 0) on_sp "        "))
 (Token ((39 8) on_kw "unless"))
 (Token ((39 14) on_sp " "))
 (Token ((39 15) on_ivar "@servers"))
 (Token ((39 23) on_period "."))
 (Token ((39 24) on_ident "has_key?"))
 (Token ((39 32) on_lparen "("))
 (Token ((39 33) on_ident "server"))
 (Token ((39 39) on_rparen ")"))
 (Token ((39 40) on_nl "\n"))
 (Token ((40 0) on_sp "          "))
 (Token ((40 10) on_ivar "@servers"))
 (Token ((40 18) on_lbracket "["))
 (Token ((40 19) on_ident "server"))
 (Token ((40 25) on_rbracket "]"))
 (Token ((40 26) on_sp " "))
 (Token ((40 27) on_op "="))
 (Token ((40 28) on_sp " "))
 (Token ((40 29) on_ident "server"))
 (Token ((40 35) on_nl "\n"))
 (Token ((41 0) on_sp "          "))
 (Token ((41 10) on_ivar "@available_connections"))
 (Token ((41 32) on_lbracket "["))
 (Token ((41 33) on_ident "server"))
 (Token ((41 39) on_rbracket "]"))
 (Token ((41 40) on_sp " "))
 (Token ((41 41) on_op "="))
 (Token ((41 42) on_sp " "))
 (Token ((41 43) on_lbracket "["))
 (Token ((41 44) on_rbracket "]"))
 (Token ((41 45) on_nl "\n"))
 (Token ((42 0) on_sp "          "))
 (Token ((42 10) on_ivar "@allocated"))
 (Token ((42 20) on_lbracket "["))
 (Token ((42 21) on_ident "server"))
 (Token ((42 27) on_rbracket "]"))
 (Token ((42 28) on_sp " "))
 (Token ((42 29) on_op "="))
 (Token ((42 30) on_sp " "))
 (Token ((42 31) on_lbrace "{"))
 (Token ((42 32) on_rbrace "}"))
 (Token ((42 33) on_nl "\n"))
 (Token ((43 0) on_sp "          "))
 (Token ((43 10) on_ivar "@waiters"))
 (Token ((43 18) on_lbracket "["))
 (Token ((43 19) on_ident "server"))
 (Token ((43 25) on_rbracket "]"))
 (Token ((43 26) on_sp " "))
 (Token ((43 27) on_op "="))
 (Token ((43 28) on_sp " "))
 (Token ((43 29) on_const "ConditionVariable"))
 (Token ((43 46) on_period "."))
 (Token ((43 47) on_ident "new"))
 (Token ((43 50) on_sp " "))
 (Token ((43 51) on_kw "if"))
 (Token ((43 53) on_sp " "))
 (Token ((43 54) on_const "USE_WAITER"))
 (Token ((43 64) on_nl "\n"))
 (Token ((44 0) on_sp "        "))
 (Token ((44 8) on_kw "end"))
 (Token ((44 11) on_nl "\n"))
 (Token ((45 0) on_sp "      "))
 (Token ((45 6) on_kw "end"))
 (Token ((45 9) on_nl "\n"))
 (Token ((46 0) on_sp "    "))
 (Token ((46 4) on_kw "end"))
 (Token ((46 7) on_nl "\n"))
 (Token ((47 0) on_sp "  "))
 (Token ((47 2) on_kw "end"))
 (Token ((47 5) on_nl "\n"))
 (Token ((48 0) on_ignored_nl "\n"))
 (Token ((49 0) on_sp "  "))
 (Token
  ((49 2)
   on_comment
   "# A hash of connections currently being used for the given server, key is the\n"))
 (Token ((50 0) on_sp "  "))
 (Token
  ((50 2)
   on_comment
   "# Thread, value is the connection.  Nonexistent servers will return nil.  Treat\n"))
 (Token ((51 0) on_sp "  "))
 (Token
  ((51 2)
   on_comment
   "# this as read only, do not modify the resulting object.\n"))
 (Token ((52 0) on_sp "  "))
 (Token ((52 2) on_kw "def"))
 (Token ((52 5) on_sp " "))
 (Token ((52 6) on_ident "allocated"))
 (Token ((52 15) on_lparen "("))
 (Token ((52 16) on_ident "server"))
 (Token ((52 22) on_op "="))
 (Token ((52 23) on_symbeg ":"))
 (Token ((52 24) on_ident "default"))
 (Token ((52 31) on_rparen ")"))
 (Token ((52 32) on_ignored_nl "\n"))
 (Token ((53 0) on_sp "    "))
 (Token ((53 4) on_ivar "@allocated"))
 (Token ((53 14) on_lbracket "["))
 (Token ((53 15) on_ident "server"))
 (Token ((53 21) on_rbracket "]"))
 (Token ((53 22) on_nl "\n"))
 (Token ((54 0) on_sp "  "))
 (Token ((54 2) on_kw "end"))
 (Token ((54 5) on_nl "\n"))
 (Token ((55 0) on_ignored_nl "\n"))
 (Token ((56 0) on_sp "  "))
 (Token
  ((56 2)
   on_comment
   "# Yield all of the available connections, and the ones currently allocated to\n"))
 (Token ((57 0) on_sp "  "))
 (Token
  ((57 2)
   on_comment
   "# this thread.  This will not yield connections currently allocated to other\n"))
 (Token ((58 0) on_sp "  "))
 (Token
  ((58 2)
   on_comment
   "# threads, as it is not safe to operate on them.  This holds the mutex while\n"))
 (Token ((59 0) on_sp "  "))
 (Token
  ((59 2)
   on_comment
   "# it is yielding all of the connections, which means that until\n"))
 (Token ((60 0) on_sp "  "))
 (Token
  ((60 2) on_comment "# the method's block returns, the pool is locked.\n"))
 (Token ((61 0) on_sp "  "))
 (Token ((61 2) on_kw "def"))
 (Token ((61 5) on_sp " "))
 (Token ((61 6) on_ident "all_connections"))
 (Token ((61 21) on_nl "\n"))
 (Token ((62 0) on_sp "    "))
 (Token ((62 4) on_ident "t"))
 (Token ((62 5) on_sp " "))
 (Token ((62 6) on_op "="))
 (Token ((62 7) on_sp " "))
 (Token ((62 8) on_const "Thread"))
 (Token ((62 14) on_period "."))
 (Token ((62 15) on_ident "current"))
 (Token ((62 22) on_nl "\n"))
 (Token ((63 0) on_sp "    "))
 (Token ((63 4) on_ident "sync"))
 (Token ((63 8) on_sp " "))
 (Token ((63 9) on_kw "do"))
 (Token ((63 11) on_ignored_nl "\n"))
 (Token ((64 0) on_sp "      "))
 (Token ((64 6) on_ivar "@allocated"))
 (Token ((64 16) on_period "."))
 (Token ((64 17) on_ident "values"))
 (Token ((64 23) on_period "."))
 (Token ((64 24) on_ident "each"))
 (Token ((64 28) on_sp " "))
 (Token ((64 29) on_kw "do"))
 (Token ((64 31) on_sp " "))
 (Token ((64 32) on_op "|"))
 (Token ((64 33) on_ident "threads"))
 (Token ((64 40) on_op "|"))
 (Token ((64 41) on_ignored_nl "\n"))
 (Token ((65 0) on_sp "        "))
 (Token ((65 8) on_ident "threads"))
 (Token ((65 15) on_period "."))
 (Token ((65 16) on_ident "each"))
 (Token ((65 20) on_sp " "))
 (Token ((65 21) on_kw "do"))
 (Token ((65 23) on_sp " "))
 (Token ((65 24) on_op "|"))
 (Token ((65 25) on_ident "thread"))
 (Token ((65 31) on_comma ","))
 (Token ((65 32) on_sp " "))
 (Token ((65 33) on_ident "conn"))
 (Token ((65 37) on_op "|"))
 (Token ((65 38) on_ignored_nl "\n"))
 (Token ((66 0) on_sp "          "))
 (Token ((66 10) on_kw "yield"))
 (Token ((66 15) on_sp " "))
 (Token ((66 16) on_ident "conn"))
 (Token ((66 20) on_sp " "))
 (Token ((66 21) on_kw "if"))
 (Token ((66 23) on_sp " "))
 (Token ((66 24) on_ident "t"))
 (Token ((66 25) on_sp " "))
 (Token ((66 26) on_op "=="))
 (Token ((66 28) on_sp " "))
 (Token ((66 29) on_ident "thread"))
 (Token ((66 35) on_nl "\n"))
 (Token ((67 0) on_sp "        "))
 (Token ((67 8) on_kw "end"))
 (Token ((67 11) on_nl "\n"))
 (Token ((68 0) on_sp "      "))
 (Token ((68 6) on_kw "end"))
 (Token ((68 9) on_nl "\n"))
 (Token ((69 0) on_sp "      "))
 (Token ((69 6) on_ivar "@available_connections"))
 (Token ((69 28) on_period "."))
 (Token ((69 29) on_ident "values"))
 (Token ((69 35) on_period "."))
 (Token ((69 36) on_ident "each"))
 (Token ((69 40) on_lbrace "{"))
 (Token ((69 41) on_op "|"))
 (Token ((69 42) on_ident "v"))
 (Token ((69 43) on_op "|"))
 (Token ((69 44) on_sp " "))
 (Token ((69 45) on_ident "v"))
 (Token ((69 46) on_period "."))
 (Token ((69 47) on_ident "each"))
 (Token ((69 51) on_lbrace "{"))
 (Token ((69 52) on_op "|"))
 (Token ((69 53) on_ident "c"))
 (Token ((69 54) on_op "|"))
 (Token ((69 55) on_sp " "))
 (Token ((69 56) on_kw "yield"))
 (Token ((69 61) on_sp " "))
 (Token ((69 62) on_ident "c"))
 (Token ((69 63) on_rbrace "}"))
 (Token ((69 64) on_rbrace "}"))
 (Token ((69 65) on_nl "\n"))
 (Token ((70 0) on_sp "    "))
 (Token ((70 4) on_kw "end"))
 (Token ((70 7) on_nl "\n"))
 (Token ((71 0) on_sp "  "))
 (Token ((71 2) on_kw "end"))
 (Token ((71 5) on_nl "\n"))
 (Token ((72 0) on_ignored_nl "\n"))
 (Token ((73 0) on_sp "  "))
 (Token
  ((73 2)
   on_comment
   "# An array of connections opened but not currently used, for the given\n"))
 (Token ((74 0) on_sp "  "))
 (Token
  ((74 2)
   on_comment
   "# server. Nonexistent servers will return nil. Treat this as read only, do\n"))
 (Token ((75 0) on_sp "  "))
 (Token ((75 2) on_comment "# not modify the resulting object.\n"))
 (Token ((76 0) on_sp "  "))
 (Token ((76 2) on_kw "def"))
 (Token ((76 5) on_sp " "))
 (Token ((76 6) on_ident "available_connections"))
 (Token ((76 27) on_lparen "("))
 (Token ((76 28) on_ident "server"))
 (Token ((76 34) on_op "="))
 (Token ((76 35) on_symbeg ":"))
 (Token ((76 36) on_ident "default"))
 (Token ((76 43) on_rparen ")"))
 (Token ((76 44) on_ignored_nl "\n"))
 (Token ((77 0) on_sp "    "))
 (Token ((77 4) on_ivar "@available_connections"))
 (Token ((77 26) on_lbracket "["))
 (Token ((77 27) on_ident "server"))
 (Token ((77 33) on_rbracket "]"))
 (Token ((77 34) on_nl "\n"))
 (Token ((78 0) on_sp "  "))
 (Token ((78 2) on_kw "end"))
 (Token ((78 5) on_nl "\n"))
 (Token ((79 0) on_ignored_nl "\n"))
 (Token ((80 0) on_sp "  "))
 (Token
  ((80 2)
   on_comment
   "# The total number of connections opened for the given server, should\n"))
 (Token ((81 0) on_sp "  "))
 (Token
  ((81 2)
   on_comment
   "# be equal to available_connections.length + allocated.length.  Nonexistent\n"))
 (Token ((82 0) on_sp "  "))
 (Token
  ((82 2)
   on_comment
   "# servers will return the created count of the default server.\n"))
 (Token ((83 0) on_sp "  "))
 (Token ((83 2) on_kw "def"))
 (Token ((83 5) on_sp " "))
 (Token ((83 6) on_ident "size"))
 (Token ((83 10) on_lparen "("))
 (Token ((83 11) on_ident "server"))
 (Token ((83 17) on_op "="))
 (Token ((83 18) on_symbeg ":"))
 (Token ((83 19) on_ident "default"))
 (Token ((83 26) on_rparen ")"))
 (Token ((83 27) on_ignored_nl "\n"))
 (Token ((84 0) on_sp "    "))
 (Token ((84 4) on_ident "server"))
 (Token ((84 10) on_sp " "))
 (Token ((84 11) on_op "="))
 (Token ((84 12) on_sp " "))
 (Token ((84 13) on_ivar "@servers"))
 (Token ((84 21) on_lbracket "["))
 (Token ((84 22) on_ident "server"))
 (Token ((84 28) on_rbracket "]"))
 (Token ((84 29) on_nl "\n"))
 (Token ((85 0) on_sp "    "))
 (Token ((85 4) on_ivar "@allocated"))
 (Token ((85 14) on_lbracket "["))
 (Token ((85 15) on_ident "server"))
 (Token ((85 21) on_rbracket "]"))
 (Token ((85 22) on_period "."))
 (Token ((85 23) on_ident "length"))
 (Token ((85 29) on_sp " "))
 (Token ((85 30) on_op "+"))
 (Token ((85 31) on_sp " "))
 (Token ((85 32) on_ivar "@available_connections"))
 (Token ((85 54) on_lbracket "["))
 (Token ((85 55) on_ident "server"))
 (Token ((85 61) on_rbracket "]"))
 (Token ((85 62) on_period "."))
 (Token ((85 63) on_ident "length"))
 (Token ((85 69) on_nl "\n"))
 (Token ((86 0) on_sp "  "))
 (Token ((86 2) on_kw "end"))
 (Token ((86 5) on_nl "\n"))
 (Token ((87 0) on_ignored_nl "\n"))
 (Token ((88 0) on_sp "  "))
 (Token
  ((88 2)
   on_comment
   "# Removes all connections currently available on all servers, optionally\n"))
 (Token ((89 0) on_sp "  "))
 (Token
  ((89 2)
   on_comment
   "# yielding each connection to the given block. This method has the effect of\n"))
 (Token ((90 0) on_sp "  "))
 (Token
  ((90 2)
   on_comment
   "# disconnecting from the database, assuming that no connections are currently\n"))
 (Token ((91 0) on_sp "  "))
 (Token
  ((91 2)
   on_comment
   "# being used.  If connections are being used, they are scheduled to be\n"))
 (Token ((92 0) on_sp "  "))
 (Token
  ((92 2)
   on_comment
   "# disconnected as soon as they are returned to the pool.\n"))
 (Token ((93 0) on_sp "  "))
 (Token ((93 2) on_comment "#\n"))
 (Token ((94 0) on_sp "  "))
 (Token
  ((94 2)
   on_comment
   "# Once a connection is requested using #hold, the connection pool\n"))
 (Token ((95 0) on_sp "  "))
 (Token
  ((95 2) on_comment "# creates new connections to the database. Options:\n"))
 (Token ((96 0) on_sp "  "))
 (Token
  ((96 2)
   on_comment
   "# :server :: Should be a symbol specifing the server to disconnect from,\n"))
 (Token ((97 0) on_sp "  "))
 (Token
  ((97 2)
   on_comment
   "#            or an array of symbols to specify multiple servers.\n"))
 (Token ((98 0) on_sp "  "))
 (Token ((98 2) on_kw "def"))
 (Token ((98 5) on_sp " "))
 (Token ((98 6) on_ident "disconnect"))
 (Token ((98 16) on_lparen "("))
 (Token ((98 17) on_ident "opts"))
 (Token ((98 21) on_op "="))
 (Token ((98 22) on_const "OPTS"))
 (Token ((98 26) on_rparen ")"))
 (Token ((98 27) on_ignored_nl "\n"))
 (Token ((99 0) on_sp "    "))
 (Token ((99 4) on_ident "sync"))
 (Token ((99 8) on_sp " "))
 (Token ((99 9) on_kw "do"))
 (Token ((99 11) on_ignored_nl "\n"))
 (Token ((100 0) on_sp "      "))
 (Token ((100 6) on_lparen "("))
 (Token ((100 7) on_ident "opts"))
 (Token ((100 11) on_lbracket "["))
 (Token ((100 12) on_symbeg ":"))
 (Token ((100 13) on_ident "server"))
 (Token ((100 19) on_rbracket "]"))
 (Token ((100 20) on_sp " "))
 (Token ((100 21) on_op "?"))
 (Token ((100 22) on_sp " "))
 (Token ((100 23) on_const "Array"))
 (Token ((100 28) on_lparen "("))
 (Token ((100 29) on_ident "opts"))
 (Token ((100 33) on_lbracket "["))
 (Token ((100 34) on_symbeg ":"))
 (Token ((100 35) on_ident "server"))
 (Token ((100 41) on_rbracket "]"))
 (Token ((100 42) on_rparen ")"))
 (Token ((100 43) on_sp " "))
 (Token ((100 44) on_op ":"))
 (Token ((100 45) on_sp " "))
 (Token ((100 46) on_ivar "@servers"))
 (Token ((100 54) on_period "."))
 (Token ((100 55) on_ident "keys"))
 (Token ((100 59) on_rparen ")"))
 (Token ((100 60) on_period "."))
 (Token ((100 61) on_ident "each"))
 (Token ((100 65) on_sp " "))
 (Token ((100 66) on_kw "do"))
 (Token ((100 68) on_sp " "))
 (Token ((100 69) on_op "|"))
 (Token ((100 70) on_ident "s"))
 (Token ((100 71) on_op "|"))
 (Token ((100 72) on_ignored_nl "\n"))
 (Token ((101 0) on_sp "        "))
 (Token ((101 8) on_ident "disconnect_server"))
 (Token ((101 25) on_lparen "("))
 (Token ((101 26) on_ident "s"))
 (Token ((101 27) on_rparen ")"))
 (Token ((101 28) on_nl "\n"))
 (Token ((102 0) on_sp "      "))
 (Token ((102 6) on_kw "end"))
 (Token ((102 9) on_nl "\n"))
 (Token ((103 0) on_sp "    "))
 (Token ((103 4) on_kw "end"))
 (Token ((103 7) on_nl "\n"))
 (Token ((104 0) on_sp "  "))
 (Token ((104 2) on_kw "end"))
 (Token ((104 5) on_nl "\n"))
 (Token ((105 0) on_ignored_nl "\n"))
 (Token ((106 0) on_sp "  "))
 (Token
  ((106 2)
   on_comment
   "# Chooses the first available connection to the given server, or if none are\n"))
 (Token ((107 0) on_sp "  "))
 (Token
  ((107 2)
   on_comment
   "# available, creates a new connection.  Passes the connection to the supplied\n"))
 (Token ((108 0) on_sp "  "))
 (Token ((108 2) on_comment "# block:\n"))
 (Token ((109 0) on_sp "  "))
 (Token ((109 2) on_comment "#\n"))
 (Token ((110 0) on_sp "  "))
 (Token
  ((110 2)
   on_comment
   "#   pool.hold {|conn| conn.execute('DROP TABLE posts')}\n"))
 (Token ((111 0) on_sp "  "))
 (Token ((111 2) on_comment "#\n"))
 (Token ((112 0) on_sp "  "))
 (Token
  ((112 2)
   on_comment
   "# Pool#hold is re-entrant, meaning it can be called recursively in\n"))
 (Token ((113 0) on_sp "  "))
 (Token ((113 2) on_comment "# the same thread without blocking.\n"))
 (Token ((114 0) on_sp "  "))
 (Token ((114 2) on_comment "#\n"))
 (Token ((115 0) on_sp "  "))
 (Token
  ((115 2)
   on_comment
   "# If no connection is immediately available and the pool is already using the maximum\n"))
 (Token ((116 0) on_sp "  "))
 (Token
  ((116 2)
   on_comment
   "# number of connections, Pool#hold will block until a connection\n"))
 (Token ((117 0) on_sp "  "))
 (Token
  ((117 2)
   on_comment
   "# is available or the timeout expires.  If the timeout expires before a\n"))
 (Token ((118 0) on_sp "  "))
 (Token
  ((118 2)
   on_comment
   "# connection can be acquired, a Sequel::PoolTimeout is\n"))
 (Token ((119 0) on_sp "  "))
 (Token ((119 2) on_comment "# raised.\n"))
 (Token ((120 0) on_sp "  "))
 (Token ((120 2) on_kw "def"))
 (Token ((120 5) on_sp " "))
 (Token ((120 6) on_ident "hold"))
 (Token ((120 10) on_lparen "("))
 (Token ((120 11) on_ident "server"))
 (Token ((120 17) on_op "="))
 (Token ((120 18) on_symbeg ":"))
 (Token ((120 19) on_ident "default"))
 (Token ((120 26) on_rparen ")"))
 (Token ((120 27) on_ignored_nl "\n"))
 (Token ((121 0) on_sp "    "))
 (Token ((121 4) on_ident "server"))
 (Token ((121 10) on_sp " "))
 (Token ((121 11) on_op "="))
 (Token ((121 12) on_sp " "))
 (Token ((121 13) on_ident "pick_server"))
 (Token ((121 24) on_lparen "("))
 (Token ((121 25) on_ident "server"))
 (Token ((121 31) on_rparen ")"))
 (Token ((121 32) on_nl "\n"))
 (Token ((122 0) on_sp "    "))
 (Token ((122 4) on_ident "t"))
 (Token ((122 5) on_sp " "))
 (Token ((122 6) on_op "="))
 (Token ((122 7) on_sp " "))
 (Token ((122 8) on_const "Thread"))
 (Token ((122 14) on_period "."))
 (Token ((122 15) on_ident "current"))
 (Token ((122 22) on_nl "\n"))
 (Token ((123 0) on_sp "    "))
 (Token ((123 4) on_kw "if"))
 (Token ((123 6) on_sp " "))
 (Token ((123 7) on_ident "conn"))
 (Token ((123 11) on_sp " "))
 (Token ((123 12) on_op "="))
 (Token ((123 13) on_sp " "))
 (Token ((123 14) on_ident "owned_connection"))
 (Token ((123 30) on_lparen "("))
 (Token ((123 31) on_ident "t"))
 (Token ((123 32) on_comma ","))
 (Token ((123 33) on_sp " "))
 (Token ((123 34) on_ident "server"))
 (Token ((123 40) on_rparen ")"))
 (Token ((123 41) on_nl "\n"))
 (Token ((124 0) on_sp "      "))
 (Token ((124 6) on_kw "return"))
 (Token ((124 12) on_sp " "))
 (Token ((124 13) on_kw "yield"))
 (Token ((124 18) on_lparen "("))
 (Token ((124 19) on_ident "conn"))
 (Token ((124 23) on_rparen ")"))
 (Token ((124 24) on_nl "\n"))
 (Token ((125 0) on_sp "    "))
 (Token ((125 4) on_kw "end"))
 (Token ((125 7) on_nl "\n"))
 (Token ((126 0) on_sp "    "))
 (Token ((126 4) on_kw "begin"))
 (Token ((126 9) on_ignored_nl "\n"))
 (Token ((127 0) on_sp "      "))
 (Token ((127 6) on_ident "conn"))
 (Token ((127 10) on_sp " "))
 (Token ((127 11) on_op "="))
 (Token ((127 12) on_sp " "))
 (Token ((127 13) on_ident "acquire"))
 (Token ((127 20) on_lparen "("))
 (Token ((127 21) on_ident "t"))
 (Token ((127 22) on_comma ","))
 (Token ((127 23) on_sp " "))
 (Token ((127 24) on_ident "server"))
 (Token ((127 30) on_rparen ")"))
 (Token ((127 31) on_nl "\n"))
 (Token ((128 0) on_sp "      "))
 (Token ((128 6) on_kw "yield"))
 (Token ((128 11) on_sp " "))
 (Token ((128 12) on_ident "conn"))
 (Token ((128 16) on_nl "\n"))
 (Token ((129 0) on_sp "    "))
 (Token ((129 4) on_kw "rescue"))
 (Token ((129 10) on_sp " "))
 (Token ((129 11) on_const "Sequel"))
 (Token ((129 17) on_op "::"))
 (Token ((129 19) on_const "DatabaseDisconnectError"))
 (Token ((129 42) on_nl "\n"))
 (Token ((130 0) on_sp "      "))
 (Token ((130 6) on_ident "sync"))
 (Token ((130 10) on_lbrace "{"))
 (Token ((130 11) on_ivar "@connections_to_remove"))
 (Token ((130 33) on_sp " "))
 (Token ((130 34) on_op "<<"))
 (Token ((130 36) on_sp " "))
 (Token ((130 37) on_ident "conn"))
 (Token ((130 41) on_rbrace "}"))
 (Token ((130 42) on_sp " "))
 (Token ((130 43) on_kw "if"))
 (Token ((130 45) on_sp " "))
 (Token ((130 46) on_ident "conn"))
 (Token ((130 50) on_nl "\n"))
 (Token ((131 0) on_sp "      "))
 (Token ((131 6) on_ident "raise"))
 (Token ((131 11) on_nl "\n"))
 (Token ((132 0) on_sp "    "))
 (Token ((132 4) on_kw "ensure"))
 (Token ((132 10) on_ignored_nl "\n"))
 (Token ((133 0) on_sp "      "))
 (Token ((133 6) on_ident "sync"))
 (Token ((133 10) on_lbrace "{"))
 (Token ((133 11) on_ident "release"))
 (Token ((133 18) on_lparen "("))
 (Token ((133 19) on_ident "t"))
 (Token ((133 20) on_comma ","))
 (Token ((133 21) on_sp " "))
 (Token ((133 22) on_ident "conn"))
 (Token ((133 26) on_comma ","))
 (Token ((133 27) on_sp " "))
 (Token ((133 28) on_ident "server"))
 (Token ((133 34) on_rparen ")"))
 (Token ((133 35) on_rbrace "}"))
 (Token ((133 36) on_sp " "))
 (Token ((133 37) on_kw "if"))
 (Token ((133 39) on_sp " "))
 (Token ((133 40) on_ident "conn"))
 (Token ((133 44) on_nl "\n"))
 (Token ((134 0) on_sp "    "))
 (Token ((134 4) on_kw "end"))
 (Token ((134 7) on_nl "\n"))
 (Token ((135 0) on_sp "  "))
 (Token ((135 2) on_kw "end"))
 (Token ((135 5) on_nl "\n"))
 (Token ((136 0) on_ignored_nl "\n"))
 (Token ((137 0) on_sp "  "))
 (Token
  ((137 2)
   on_comment
   "# Remove servers from the connection pool. Primarily used in conjunction with master/slave\n"))
 (Token ((138 0) on_sp "  "))
 (Token
  ((138 2)
   on_comment
   "# or shard configurations.  Similar to disconnecting from all given servers,\n"))
 (Token ((139 0) on_sp "  "))
 (Token
  ((139 2)
   on_comment
   "# except that after it is used, future requests for the server will use the\n"))
 (Token ((140 0) on_sp "  "))
 (Token ((140 2) on_comment "# :default server instead.\n"))
 (Token ((141 0) on_sp "  "))
 (Token ((141 2) on_kw "def"))
 (Token ((141 5) on_sp " "))
 (Token ((141 6) on_ident "remove_servers"))
 (Token ((141 20) on_lparen "("))
 (Token ((141 21) on_ident "servers"))
 (Token ((141 28) on_rparen ")"))
 (Token ((141 29) on_ignored_nl "\n"))
 (Token ((142 0) on_sp "    "))
 (Token ((142 4) on_ident "sync"))
 (Token ((142 8) on_sp " "))
 (Token ((142 9) on_kw "do"))
 (Token ((142 11) on_ignored_nl "\n"))
 (Token ((143 0) on_sp "      "))
 (Token ((143 6) on_ident "raise"))
 (Token ((143 11) on_lparen "("))
 (Token ((143 12) on_const "Sequel"))
 (Token ((143 18) on_op "::"))
 (Token ((143 20) on_const "Error"))
 (Token ((143 25) on_comma ","))
 (Token ((143 26) on_sp " "))
 (Token ((143 27) on_tstring_beg "\""))
 (Token ((143 28) on_tstring_content "cannot remove default server"))
 (Token ((143 56) on_tstring_end "\""))
 (Token ((143 57) on_rparen ")"))
 (Token ((143 58) on_sp " "))
 (Token ((143 59) on_kw "if"))
 (Token ((143 61) on_sp " "))
 (Token ((143 62) on_ident "servers"))
 (Token ((143 69) on_period "."))
 (Token ((143 70) on_ident "include?"))
 (Token ((143 78) on_lparen "("))
 (Token ((143 79) on_symbeg ":"))
 (Token ((143 80) on_ident "default"))
 (Token ((143 87) on_rparen ")"))
 (Token ((143 88) on_nl "\n"))
 (Token ((144 0) on_sp "      "))
 (Token ((144 6) on_ident "servers"))
 (Token ((144 13) on_period "."))
 (Token ((144 14) on_ident "each"))
 (Token ((144 18) on_sp " "))
 (Token ((144 19) on_kw "do"))
 (Token ((144 21) on_sp " "))
 (Token ((144 22) on_op "|"))
 (Token ((144 23) on_ident "server"))
 (Token ((144 29) on_op "|"))
 (Token ((144 30) on_ignored_nl "\n"))
 (Token ((145 0) on_sp "        "))
 (Token ((145 8) on_kw "if"))
 (Token ((145 10) on_sp " "))
 (Token ((145 11) on_ivar "@servers"))
 (Token ((145 19) on_period "."))
 (Token ((145 20) on_ident "include?"))
 (Token ((145 28) on_lparen "("))
 (Token ((145 29) on_ident "server"))
 (Token ((145 35) on_rparen ")"))
 (Token ((145 36) on_nl "\n"))
 (Token ((146 0) on_sp "          "))
 (Token ((146 10) on_ident "disconnect_server"))
 (Token ((146 27) on_lparen "("))
 (Token ((146 28) on_ident "server"))
 (Token ((146 34) on_rparen ")"))
 (Token ((146 35) on_nl "\n"))
 (Token ((147 0) on_sp "          "))
 (Token ((147 10) on_ivar "@waiters"))
 (Token ((147 18) on_period "."))
 (Token ((147 19) on_ident "delete"))
 (Token ((147 25) on_lparen "("))
 (Token ((147 26) on_ident "server"))
 (Token ((147 32) on_rparen ")"))
 (Token ((147 33) on_sp " "))
 (Token ((147 34) on_kw "if"))
 (Token ((147 36) on_sp " "))
 (Token ((147 37) on_const "USE_WAITER"))
 (Token ((147 47) on_nl "\n"))
 (Token ((148 0) on_sp "          "))
 (Token ((148 10) on_ivar "@available_connections"))
 (Token ((148 32) on_period "."))
 (Token ((148 33) on_ident "delete"))
 (Token ((148 39) on_lparen "("))
 (Token ((148 40) on_ident "server"))
 (Token ((148 46) on_rparen ")"))
 (Token ((148 47) on_nl "\n"))
 (Token ((149 0) on_sp "          "))
 (Token ((149 10) on_ivar "@allocated"))
 (Token ((149 20) on_period "."))
 (Token ((149 21) on_ident "delete"))
 (Token ((149 27) on_lparen "("))
 (Token ((149 28) on_ident "server"))
 (Token ((149 34) on_rparen ")"))
 (Token ((149 35) on_nl "\n"))
 (Token ((150 0) on_sp "          "))
 (Token ((150 10) on_ivar "@servers"))
 (Token ((150 18) on_period "."))
 (Token ((150 19) on_ident "delete"))
 (Token ((150 25) on_lparen "("))
 (Token ((150 26) on_ident "server"))
 (Token ((150 32) on_rparen ")"))
 (Token ((150 33) on_nl "\n"))
 (Token ((151 0) on_sp "        "))
 (Token ((151 8) on_kw "end"))
 (Token ((151 11) on_nl "\n"))
 (Token ((152 0) on_sp "      "))
 (Token ((152 6) on_kw "end"))
 (Token ((152 9) on_nl "\n"))
 (Token ((153 0) on_sp "    "))
 (Token ((153 4) on_kw "end"))
 (Token ((153 7) on_nl "\n"))
 (Token ((154 0) on_sp "  "))
 (Token ((154 2) on_kw "end"))
 (Token ((154 5) on_nl "\n"))
 (Token ((155 0) on_ignored_nl "\n"))
 (Token ((156 0) on_sp "  "))
 (Token
  ((156 2)
   on_comment
   "# Return an array of symbols for servers in the connection pool.\n"))
 (Token ((157 0) on_sp "  "))
 (Token ((157 2) on_kw "def"))
 (Token ((157 5) on_sp " "))
 (Token ((157 6) on_ident "servers"))
 (Token ((157 13) on_nl "\n"))
 (Token ((158 0) on_sp "    "))
 (Token ((158 4) on_ident "sync"))
 (Token ((158 8) on_lbrace "{"))
 (Token ((158 9) on_ivar "@servers"))
 (Token ((158 17) on_period "."))
 (Token ((158 18) on_ident "keys"))
 (Token ((158 22) on_rbrace "}"))
 (Token ((158 23) on_nl "\n"))
 (Token ((159 0) on_sp "  "))
 (Token ((159 2) on_kw "end"))
 (Token ((159 5) on_nl "\n"))
 (Token ((160 0) on_ignored_nl "\n"))
 (Token ((161 0) on_sp "  "))
 (Token ((161 2) on_kw "def"))
 (Token ((161 5) on_sp " "))
 (Token ((161 6) on_ident "pool_type"))
 (Token ((161 15) on_nl "\n"))
 (Token ((162 0) on_sp "    "))
 (Token ((162 4) on_symbeg ":"))
 (Token ((162 5) on_ident "sharded_threaded"))
 (Token ((162 21) on_nl "\n"))
 (Token ((163 0) on_sp "  "))
 (Token ((163 2) on_kw "end"))
 (Token ((163 5) on_nl "\n"))
 (Token ((164 0) on_ignored_nl "\n"))
 (Token ((165 0) on_sp "  "))
 (Token ((165 2) on_ident "private"))
 (Token ((165 9) on_nl "\n"))
 (Token ((166 0) on_ignored_nl "\n"))
 (Token ((167 0) on_sp "  "))
 (Token
  ((167 2)
   on_comment
   "# Assigns a connection to the supplied thread for the given server, if one\n"))
 (Token ((168 0) on_sp "  "))
 (Token
  ((168 2)
   on_comment
   "# is available. The calling code should already have the mutex when\n"))
 (Token ((169 0) on_sp "  "))
 (Token ((169 2) on_comment "# calling this.\n"))
 (Token ((170 0) on_sp "  "))
 (Token ((170 2) on_kw "def"))
 (Token ((170 5) on_sp " "))
 (Token ((170 6) on_ident "_acquire"))
 (Token ((170 14) on_lparen "("))
 (Token ((170 15) on_ident "thread"))
 (Token ((170 21) on_comma ","))
 (Token ((170 22) on_sp " "))
 (Token ((170 23) on_ident "server"))
 (Token ((170 29) on_rparen ")"))
 (Token ((170 30) on_ignored_nl "\n"))
 (Token ((171 0) on_sp "    "))
 (Token ((171 4) on_kw "if"))
 (Token ((171 6) on_sp " "))
 (Token ((171 7) on_ident "conn"))
 (Token ((171 11) on_sp " "))
 (Token ((171 12) on_op "="))
 (Token ((171 13) on_sp " "))
 (Token ((171 14) on_ident "available"))
 (Token ((171 23) on_lparen "("))
 (Token ((171 24) on_ident "server"))
 (Token ((171 30) on_rparen ")"))
 (Token ((171 31) on_nl "\n"))
 (Token ((172 0) on_sp "      "))
 (Token ((172 6) on_ident "allocated"))
 (Token ((172 15) on_lparen "("))
 (Token ((172 16) on_ident "server"))
 (Token ((172 22) on_rparen ")"))
 (Token ((172 23) on_lbracket "["))
 (Token ((172 24) on_ident "thread"))
 (Token ((172 30) on_rbracket "]"))
 (Token ((172 31) on_sp " "))
 (Token ((172 32) on_op "="))
 (Token ((172 33) on_sp " "))
 (Token ((172 34) on_ident "conn"))
 (Token ((172 38) on_nl "\n"))
 (Token ((173 0) on_sp "    "))
 (Token ((173 4) on_kw "end"))
 (Token ((173 7) on_nl "\n"))
 (Token ((174 0) on_sp "  "))
 (Token ((174 2) on_kw "end"))
 (Token ((174 5) on_nl "\n"))
 (Token ((175 0) on_ignored_nl "\n"))
 (Token ((176 0) on_sp "  "))
 (Token ((176 2) on_kw "if"))
 (Token ((176 4) on_sp " "))
 (Token ((176 5) on_const "USE_WAITER"))
 (Token ((176 15) on_nl "\n"))
 (Token ((177 0) on_sp "    "))
 (Token
  ((177 4)
   on_comment
   "# Assigns a connection to the supplied thread, if one\n"))
 (Token ((178 0) on_sp "    "))
 (Token
  ((178 4)
   on_comment
   "# is available. The calling code should NOT already have the mutex when\n"))
 (Token ((179 0) on_sp "    "))
 (Token ((179 4) on_comment "# calling this.\n"))
 (Token ((180 0) on_sp "    "))
 (Token ((180 4) on_comment "#\n"))
 (Token ((181 0) on_sp "    "))
 (Token
  ((181 4)
   on_comment
   "# This should return a connection is one is available within the timeout,\n"))
 (Token ((182 0) on_sp "    "))
 (Token
  ((182 4)
   on_comment
   "# or nil if a connection could not be acquired within the timeout.\n"))
 (Token ((183 0) on_sp "    "))
 (Token ((183 4) on_kw "def"))
 (Token ((183 7) on_sp " "))
 (Token ((183 8) on_ident "acquire"))
 (Token ((183 15) on_lparen "("))
 (Token ((183 16) on_ident "thread"))
 (Token ((183 22) on_comma ","))
 (Token ((183 23) on_sp " "))
 (Token ((183 24) on_ident "server"))
 (Token ((183 30) on_rparen ")"))
 (Token ((183 31) on_ignored_nl "\n"))
 (Token ((184 0) on_sp "      "))
 (Token ((184 6) on_ident "sync"))
 (Token ((184 10) on_sp " "))
 (Token ((184 11) on_kw "do"))
 (Token ((184 13) on_ignored_nl "\n"))
 (Token ((185 0) on_sp "        "))
 (Token ((185 8) on_kw "if"))
 (Token ((185 10) on_sp " "))
 (Token ((185 11) on_ident "conn"))
 (Token ((185 15) on_sp " "))
 (Token ((185 16) on_op "="))
 (Token ((185 17) on_sp " "))
 (Token ((185 18) on_ident "_acquire"))
 (Token ((185 26) on_lparen "("))
 (Token ((185 27) on_ident "thread"))
 (Token ((185 33) on_comma ","))
 (Token ((185 34) on_sp " "))
 (Token ((185 35) on_ident "server"))
 (Token ((185 41) on_rparen ")"))
 (Token ((185 42) on_nl "\n"))
 (Token ((186 0) on_sp "          "))
 (Token ((186 10) on_kw "return"))
 (Token ((186 16) on_sp " "))
 (Token ((186 17) on_ident "conn"))
 (Token ((186 21) on_nl "\n"))
 (Token ((187 0) on_sp "        "))
 (Token ((187 8) on_kw "end"))
 (Token ((187 11) on_nl "\n"))
 (Token ((188 0) on_ignored_nl "\n"))
 (Token ((189 0) on_sp "        "))
 (Token ((189 8) on_ident "time"))
 (Token ((189 12) on_sp " "))
 (Token ((189 13) on_op "="))
 (Token ((189 14) on_sp " "))
 (Token ((189 15) on_const "Time"))
 (Token ((189 19) on_period "."))
 (Token ((189 20) on_ident "now"))
 (Token ((189 23) on_nl "\n"))
 (Token ((190 0) on_sp "        "))
 (Token ((190 8) on_ivar "@waiters"))
 (Token ((190 16) on_lbracket "["))
 (Token ((190 17) on_ident "server"))
 (Token ((190 23) on_rbracket "]"))
 (Token ((190 24) on_period "."))
 (Token ((190 25) on_ident "wait"))
 (Token ((190 29) on_lparen "("))
 (Token ((190 30) on_ivar "@mutex"))
 (Token ((190 36) on_comma ","))
 (Token ((190 37) on_sp " "))
 (Token ((190 38) on_ivar "@timeout"))
 (Token ((190 46) on_rparen ")"))
 (Token ((190 47) on_nl "\n"))
 (Token ((191 0) on_sp "        "))
 (Token ((191 8) on_const "Thread"))
 (Token ((191 14) on_period "."))
 (Token ((191 15) on_ident "pass"))
 (Token ((191 19) on_nl "\n"))
 (Token ((192 0) on_ignored_nl "\n"))
 (Token ((193 0) on_sp "        "))
 (Token ((193 8) on_kw "until"))
 (Token ((193 13) on_sp " "))
 (Token ((193 14) on_ident "conn"))
 (Token ((193 18) on_sp " "))
 (Token ((193 19) on_op "="))
 (Token ((193 20) on_sp " "))
 (Token ((193 21) on_ident "_acquire"))
 (Token ((193 29) on_lparen "("))
 (Token ((193 30) on_ident "thread"))
 (Token ((193 36) on_comma ","))
 (Token ((193 37) on_sp " "))
 (Token ((193 38) on_ident "server"))
 (Token ((193 44) on_rparen ")"))
 (Token ((193 45) on_nl "\n"))
 (Token ((194 0) on_sp "          "))
 (Token ((194 10) on_ident "deadline"))
 (Token ((194 18) on_sp " "))
 (Token ((194 19) on_op "||="))
 (Token ((194 22) on_sp " "))
 (Token ((194 23) on_ident "time"))
 (Token ((194 27) on_sp " "))
 (Token ((194 28) on_op "+"))
 (Token ((194 29) on_sp " "))
 (Token ((194 30) on_ivar "@timeout"))
 (Token ((194 38) on_nl "\n"))
 (Token ((195 0) on_sp "          "))
 (Token ((195 10) on_ident "current_time"))
 (Token ((195 22) on_sp " "))
 (Token ((195 23) on_op "="))
 (Token ((195 24) on_sp " "))
 (Token ((195 25) on_const "Time"))
 (Token ((195 29) on_period "."))
 (Token ((195 30) on_ident "now"))
 (Token ((195 33) on_nl "\n"))
 (Token ((196 0) on_sp "          "))
 (Token ((196 10) on_ident "raise"))
 (Token ((196 15) on_lparen "("))
 (Token ((196 16) on_op "::"))
 (Token ((196 18) on_const "Sequel"))
 (Token ((196 24) on_op "::"))
 (Token ((196 26) on_const "PoolTimeout"))
 (Token ((196 37) on_comma ","))
 (Token ((196 38) on_sp " "))
 (Token ((196 39) on_tstring_beg "\""))
 (Token ((196 40) on_tstring_content "timeout: "))
 (Token ((196 49) on_embexpr_beg "\\#{"))
 (Token ((196 51) on_ivar "@timeout"))
 (Token ((196 59) on_embexpr_end "}"))
 (Token ((196 60) on_tstring_content ", elapsed: "))
 (Token ((196 71) on_embexpr_beg "\\#{"))
 (Token ((196 73) on_ident "current_time"))
 (Token ((196 85) on_sp " "))
 (Token ((196 86) on_op "-"))
 (Token ((196 87) on_sp " "))
 (Token ((196 88) on_ident "time"))
 (Token ((196 92) on_embexpr_end "}"))
 (Token ((196 93) on_tstring_end "\""))
 (Token ((196 94) on_rparen ")"))
 (Token ((196 95) on_sp " "))
 (Token ((196 96) on_kw "if"))
 (Token ((196 98) on_sp " "))
 (Token ((196 99) on_ident "current_time"))
 (Token ((196 111) on_sp " "))
 (Token ((196 112) on_op ">"))
 (Token ((196 113) on_sp " "))
 (Token ((196 114) on_ident "deadline"))
 (Token ((196 122) on_nl "\n"))
 (Token ((197 0) on_sp "          "))
 (Token ((197 10) on_comment "# :nocov:\n"))
 (Token ((198 0) on_sp "          "))
 (Token
  ((198 10)
   on_comment
   "# It's difficult to get to this point, it can only happen if there is a race condition\n"))
 (Token ((199 0) on_sp "          "))
 (Token
  ((199 10)
   on_comment
   "# where a connection cannot be acquired even after the thread is signalled by the condition\n"))
 (Token ((200 0) on_sp "          "))
 (Token ((200 10) on_comment "# variable that a connection is ready.\n"))
 (Token ((201 0) on_sp "          "))
 (Token ((201 10) on_ivar "@waiters"))
 (Token ((201 18) on_lbracket "["))
 (Token ((201 19) on_ident "server"))
 (Token ((201 25) on_rbracket "]"))
 (Token ((201 26) on_period "."))
 (Token ((201 27) on_ident "wait"))
 (Token ((201 31) on_lparen "("))
 (Token ((201 32) on_ivar "@mutex"))
 (Token ((201 38) on_comma ","))
 (Token ((201 39) on_sp " "))
 (Token ((201 40) on_ident "deadline"))
 (Token ((201 48) on_sp " "))
 (Token ((201 49) on_op "-"))
 (Token ((201 50) on_sp " "))
 (Token ((201 51) on_ident "current_time"))
 (Token ((201 63) on_rparen ")"))
 (Token ((201 64) on_nl "\n"))
 (Token ((202 0) on_sp "          "))
 (Token ((202 10) on_const "Thread"))
 (Token ((202 16) on_period "."))
 (Token ((202 17) on_ident "pass"))
 (Token ((202 21) on_nl "\n"))
 (Token ((203 0) on_sp "          "))
 (Token ((203 10) on_comment "# :nocov:\n"))
 (Token ((204 0) on_sp "        "))
 (Token ((204 8) on_kw "end"))
 (Token ((204 11) on_nl "\n"))
 (Token ((205 0) on_ignored_nl "\n"))
 (Token ((206 0) on_sp "        "))
 (Token ((206 8) on_ident "conn"))
 (Token ((206 12) on_nl "\n"))
 (Token ((207 0) on_sp "      "))
 (Token ((207 6) on_kw "end"))
 (Token ((207 9) on_nl "\n"))
 (Token ((208 0) on_sp "    "))
 (Token ((208 4) on_kw "end"))
 (Token ((208 7) on_nl "\n"))
 (Token ((209 0) on_sp "  "))
 (Token ((209 2) on_kw "else"))
 (Token ((209 6) on_ignored_nl "\n"))
 (Token ((210 0) on_sp "    "))
 (Token ((210 4) on_comment "# :nocov:\n"))
 (Token ((211 0) on_sp "    "))
 (Token ((211 4) on_kw "def"))
 (Token ((211 7) on_sp " "))
 (Token ((211 8) on_ident "acquire"))
 (Token ((211 15) on_lparen "("))
 (Token ((211 16) on_ident "thread"))
 (Token ((211 22) on_comma ","))
 (Token ((211 23) on_sp " "))
 (Token ((211 24) on_ident "server"))
 (Token ((211 30) on_rparen ")"))
 (Token ((211 31) on_ignored_nl "\n"))
 (Token ((212 0) on_sp "      "))
 (Token ((212 6) on_kw "unless"))
 (Token ((212 12) on_sp " "))
 (Token ((212 13) on_ident "conn"))
 (Token ((212 17) on_sp " "))
 (Token ((212 18) on_op "="))
 (Token ((212 19) on_sp " "))
 (Token ((212 20) on_ident "sync"))
 (Token ((212 24) on_lbrace "{"))
 (Token ((212 25) on_ident "_acquire"))
 (Token ((212 33) on_lparen "("))
 (Token ((212 34) on_ident "thread"))
 (Token ((212 40) on_comma ","))
 (Token ((212 41) on_sp " "))
 (Token ((212 42) on_ident "server"))
 (Token ((212 48) on_rparen ")"))
 (Token ((212 49) on_rbrace "}"))
 (Token ((212 50) on_nl "\n"))
 (Token ((213 0) on_sp "        "))
 (Token ((213 8) on_ident "time"))
 (Token ((213 12) on_sp " "))
 (Token ((213 13) on_op "="))
 (Token ((213 14) on_sp " "))
 (Token ((213 15) on_const "Time"))
 (Token ((213 19) on_period "."))
 (Token ((213 20) on_ident "now"))
 (Token ((213 23) on_nl "\n"))
 (Token ((214 0) on_sp "        "))
 (Token ((214 8) on_ident "timeout"))
 (Token ((214 15) on_sp " "))
 (Token ((214 16) on_op "="))
 (Token ((214 17) on_sp " "))
 (Token ((214 18) on_ident "time"))
 (Token ((214 22) on_sp " "))
 (Token ((214 23) on_op "+"))
 (Token ((214 24) on_sp " "))
 (Token ((214 25) on_ivar "@timeout"))
 (Token ((214 33) on_nl "\n"))
 (Token ((215 0) on_sp "        "))
 (Token ((215 8) on_ident "sleep_time"))
 (Token ((215 18) on_sp " "))
 (Token ((215 19) on_op "="))
 (Token ((215 20) on_sp " "))
 (Token ((215 21) on_ivar "@sleep_time"))
 (Token ((215 32) on_nl "\n"))
 (Token ((216 0) on_sp "        "))
 (Token ((216 8) on_ident "sleep"))
 (Token ((216 13) on_sp " "))
 (Token ((216 14) on_ident "sleep_time"))
 (Token ((216 24) on_nl "\n"))
 (Token ((217 0) on_sp "        "))
 (Token ((217 8) on_kw "until"))
 (Token ((217 13) on_sp " "))
 (Token ((217 14) on_ident "conn"))
 (Token ((217 18) on_sp " "))
 (Token ((217 19) on_op "="))
 (Token ((217 20) on_sp " "))
 (Token ((217 21) on_ident "sync"))
 (Token ((217 25) on_lbrace "{"))
 (Token ((217 26) on_ident "_acquire"))
 (Token ((217 34) on_lparen "("))
 (Token ((217 35) on_ident "thread"))
 (Token ((217 41) on_comma ","))
 (Token ((217 42) on_sp " "))
 (Token ((217 43) on_ident "server"))
 (Token ((217 49) on_rparen ")"))
 (Token ((217 50) on_rbrace "}"))
 (Token ((217 51) on_nl "\n"))
 (Token ((218 0) on_sp "          "))
 (Token ((218 10) on_ident "raise"))
 (Token ((218 15) on_lparen "("))
 (Token ((218 16) on_op "::"))
 (Token ((218 18) on_const "Sequel"))
 (Token ((218 24) on_op "::"))
 (Token ((218 26) on_const "PoolTimeout"))
 (Token ((218 37) on_comma ","))
 (Token ((218 38) on_sp " "))
 (Token ((218 39) on_tstring_beg "\""))
 (Token ((218 40) on_tstring_content "timeout: "))
 (Token ((218 49) on_embexpr_beg "\\#{"))
 (Token ((218 51) on_ivar "@timeout"))
 (Token ((218 59) on_embexpr_end "}"))
 (Token ((218 60) on_tstring_content ", elapsed: "))
 (Token ((218 71) on_embexpr_beg "\\#{"))
 (Token ((218 73) on_const "Time"))
 (Token ((218 77) on_period "."))
 (Token ((218 78) on_ident "now"))
 (Token ((218 81) on_sp " "))
 (Token ((218 82) on_op "-"))
 (Token ((218 83) on_sp " "))
 (Token ((218 84) on_ident "time"))
 (Token ((218 88) on_embexpr_end "}"))
 (Token ((218 89) on_tstring_end "\""))
 (Token ((218 90) on_rparen ")"))
 (Token ((218 91) on_sp " "))
 (Token ((218 92) on_kw "if"))
 (Token ((218 94) on_sp " "))
 (Token ((218 95) on_const "Time"))
 (Token ((218 99) on_period "."))
 (Token ((218 100) on_ident "now"))
 (Token ((218 103) on_sp " "))
 (Token ((218 104) on_op ">"))
 (Token ((218 105) on_sp " "))
 (Token ((218 106) on_ident "timeout"))
 (Token ((218 113) on_nl "\n"))
 (Token ((219 0) on_sp "          "))
 (Token ((219 10) on_ident "sleep"))
 (Token ((219 15) on_sp " "))
 (Token ((219 16) on_ident "sleep_time"))
 (Token ((219 26) on_nl "\n"))
 (Token ((220 0) on_sp "        "))
 (Token ((220 8) on_kw "end"))
 (Token ((220 11) on_nl "\n"))
 (Token ((221 0) on_sp "      "))
 (Token ((221 6) on_kw "end"))
 (Token ((221 9) on_nl "\n"))
 (Token ((222 0) on_sp "      "))
 (Token ((222 6) on_ident "conn"))
 (Token ((222 10) on_nl "\n"))
 (Token ((223 0) on_sp "    "))
 (Token ((223 4) on_kw "end"))
 (Token ((223 7) on_nl "\n"))
 (Token ((224 0) on_sp "    "))
 (Token ((224 4) on_comment "# :nocov:\n"))
 (Token ((225 0) on_sp "  "))
 (Token ((225 2) on_kw "end"))
 (Token ((225 5) on_nl "\n"))
 (Token ((226 0) on_ignored_nl "\n"))
 (Token ((227 0) on_sp "  "))
 (Token
  ((227 2)
   on_comment
   "# Returns an available connection to the given server. If no connection is\n"))
 (Token ((228 0) on_sp "  "))
 (Token
  ((228 2)
   on_comment
   "# available, tries to create a new connection. The calling code should already\n"))
 (Token ((229 0) on_sp "  "))
 (Token ((229 2) on_comment "# have the mutex before calling this.\n"))
 (Token ((230 0) on_sp "  "))
 (Token ((230 2) on_kw "def"))
 (Token ((230 5) on_sp " "))
 (Token ((230 6) on_ident "available"))
 (Token ((230 15) on_lparen "("))
 (Token ((230 16) on_ident "server"))
 (Token ((230 22) on_rparen ")"))
 (Token ((230 23) on_ignored_nl "\n"))
 (Token ((231 0) on_sp "    "))
 (Token ((231 4) on_ident "next_available"))
 (Token ((231 18) on_lparen "("))
 (Token ((231 19) on_ident "server"))
 (Token ((231 25) on_rparen ")"))
 (Token ((231 26) on_sp " "))
 (Token ((231 27) on_op "||"))
 (Token ((231 29) on_sp " "))
 (Token ((231 30) on_ident "make_new"))
 (Token ((231 38) on_lparen "("))
 (Token ((231 39) on_ident "server"))
 (Token ((231 45) on_rparen ")"))
 (Token ((231 46) on_nl "\n"))
 (Token ((232 0) on_sp "  "))
 (Token ((232 2) on_kw "end"))
 (Token ((232 5) on_nl "\n"))
 (Token ((233 0) on_ignored_nl "\n"))
 (Token ((234 0) on_sp "  "))
 (Token
  ((234 2)
   on_comment
   "# Return a connection to the pool of available connections for the server,\n"))
 (Token ((235 0) on_sp "  "))
 (Token
  ((235 2)
   on_comment
   "# returns the connection. The calling code should already have the mutex\n"))
 (Token ((236 0) on_sp "  "))
 (Token ((236 2) on_comment "# before calling this.\n"))
 (Token ((237 0) on_sp "  "))
 (Token ((237 2) on_kw "def"))
 (Token ((237 5) on_sp " "))
 (Token ((237 6) on_ident "checkin_connection"))
 (Token ((237 24) on_lparen "("))
 (Token ((237 25) on_ident "server"))
 (Token ((237 31) on_comma ","))
 (Token ((237 32) on_sp " "))
 (Token ((237 33) on_ident "conn"))
 (Token ((237 37) on_rparen ")"))
 (Token ((237 38) on_ignored_nl "\n"))
 (Token ((238 0) on_sp "    "))
 (Token ((238 4) on_ident "available_connections"))
 (Token ((238 25) on_lparen "("))
 (Token ((238 26) on_ident "server"))
 (Token ((238 32) on_rparen ")"))
 (Token ((238 33) on_sp " "))
 (Token ((238 34) on_op "<<"))
 (Token ((238 36) on_sp " "))
 (Token ((238 37) on_ident "conn"))
 (Token ((238 41) on_nl "\n"))
 (Token ((239 0) on_sp "    "))
 (Token ((239 4) on_kw "if"))
 (Token ((239 6) on_sp " "))
 (Token ((239 7) on_const "USE_WAITER"))
 (Token ((239 17) on_nl "\n"))
 (Token ((240 0) on_sp "      "))
 (Token ((240 6) on_ivar "@waiters"))
 (Token ((240 14) on_lbracket "["))
 (Token ((240 15) on_ident "server"))
 (Token ((240 21) on_rbracket "]"))
 (Token ((240 22) on_period "."))
 (Token ((240 23) on_ident "signal"))
 (Token ((240 29) on_nl "\n"))
 (Token ((241 0) on_sp "      "))
 (Token ((241 6) on_const "Thread"))
 (Token ((241 12) on_period "."))
 (Token ((241 13) on_ident "pass"))
 (Token ((241 17) on_nl "\n"))
 (Token ((242 0) on_sp "    "))
 (Token ((242 4) on_kw "end"))
 (Token ((242 7) on_nl "\n"))
 (Token ((243 0) on_sp "    "))
 (Token ((243 4) on_ident "conn"))
 (Token ((243 8) on_nl "\n"))
 (Token ((244 0) on_sp "  "))
 (Token ((244 2) on_kw "end"))
 (Token ((244 5) on_nl "\n"))
 (Token ((245 0) on_ignored_nl "\n"))
 (Token ((246 0) on_sp "  "))
 (Token
  ((246 2)
   on_comment
   "# Disconnect from the given server.  Disconnects available connections\n"))
 (Token ((247 0) on_sp "  "))
 (Token
  ((247 2)
   on_comment
   "# immediately, and schedules currently allocated connections for disconnection\n"))
 (Token ((248 0) on_sp "  "))
 (Token
  ((248 2)
   on_comment
   "# as soon as they are returned to the pool. The calling code should already\n"))
 (Token ((249 0) on_sp "  "))
 (Token ((249 2) on_comment "# have the mutex before calling this.\n"))
 (Token ((250 0) on_sp "  "))
 (Token ((250 2) on_kw "def"))
 (Token ((250 5) on_sp " "))
 (Token ((250 6) on_ident "disconnect_server"))
 (Token ((250 23) on_lparen "("))
 (Token ((250 24) on_ident "server"))
 (Token ((250 30) on_rparen ")"))
 (Token ((250 31) on_ignored_nl "\n"))
 (Token ((251 0) on_sp "    "))
 (Token ((251 4) on_kw "if"))
 (Token ((251 6) on_sp " "))
 (Token ((251 7) on_ident "conns"))
 (Token ((251 12) on_sp " "))
 (Token ((251 13) on_op "="))
 (Token ((251 14) on_sp " "))
 (Token ((251 15) on_ident "available_connections"))
 (Token ((251 36) on_lparen "("))
 (Token ((251 37) on_ident "server"))
 (Token ((251 43) on_rparen ")"))
 (Token ((251 44) on_nl "\n"))
 (Token ((252 0) on_sp "      "))
 (Token ((252 6) on_ident "conns"))
 (Token ((252 11) on_period "."))
 (Token ((252 12) on_ident "each"))
 (Token ((252 16) on_lbrace "{"))
 (Token ((252 17) on_op "|"))
 (Token ((252 18) on_ident "conn"))
 (Token ((252 22) on_op "|"))
 (Token ((252 23) on_sp " "))
 (Token ((252 24) on_ident "db"))
 (Token ((252 26) on_period "."))
 (Token ((252 27) on_ident "disconnect_connection"))
 (Token ((252 48) on_lparen "("))
 (Token ((252 49) on_ident "conn"))
 (Token ((252 53) on_rparen ")"))
 (Token ((252 54) on_rbrace "}"))
 (Token ((252 55) on_nl "\n"))
 (Token ((253 0) on_sp "      "))
 (Token ((253 6) on_ident "conns"))
 (Token ((253 11) on_period "."))
 (Token ((253 12) on_ident "clear"))
 (Token ((253 17) on_nl "\n"))
 (Token ((254 0) on_sp "    "))
 (Token ((254 4) on_kw "end"))
 (Token ((254 7) on_nl "\n"))
 (Token ((255 0) on_sp "    "))
 (Token ((255 4) on_ivar "@connections_to_remove"))
 (Token ((255 26) on_period "."))
 (Token ((255 27) on_ident "concat"))
 (Token ((255 33) on_lparen "("))
 (Token ((255 34) on_ident "allocated"))
 (Token ((255 43) on_lparen "("))
 (Token ((255 44) on_ident "server"))
 (Token ((255 50) on_rparen ")"))
 (Token ((255 51) on_period "."))
 (Token ((255 52) on_ident "values"))
 (Token ((255 58) on_rparen ")"))
 (Token ((255 59) on_nl "\n"))
 (Token ((256 0) on_sp "  "))
 (Token ((256 2) on_kw "end"))
 (Token ((256 5) on_nl "\n"))
 (Token ((257 0) on_ignored_nl "\n"))
 (Token ((258 0) on_sp "  "))
 (Token
  ((258 2)
   on_comment
   "# Creates a new connection to the given server if the size of the pool for\n"))
 (Token ((259 0) on_sp "  "))
 (Token
  ((259 2)
   on_comment
   "# the server is less than the maximum size of the pool. The calling code\n"))
 (Token ((260 0) on_sp "  "))
 (Token
  ((260 2)
   on_comment
   "# should already have the mutex before calling this.\n"))
 (Token ((261 0) on_sp "  "))
 (Token ((261 2) on_kw "def"))
 (Token ((261 5) on_sp " "))
 (Token ((261 6) on_ident "make_new"))
 (Token ((261 14) on_lparen "("))
 (Token ((261 15) on_ident "server"))
 (Token ((261 21) on_rparen ")"))
 (Token ((261 22) on_ignored_nl "\n"))
 (Token ((262 0) on_sp "    "))
 (Token ((262 4) on_kw "if"))
 (Token ((262 6) on_sp " "))
 (Token ((262 7) on_lparen "("))
 (Token ((262 8) on_ident "n"))
 (Token ((262 9) on_sp " "))
 (Token ((262 10) on_op "="))
 (Token ((262 11) on_sp " "))
 (Token ((262 12) on_ident "size"))
 (Token ((262 16) on_lparen "("))
 (Token ((262 17) on_ident "server"))
 (Token ((262 23) on_rparen ")"))
 (Token ((262 24) on_rparen ")"))
 (Token ((262 25) on_sp " "))
 (Token ((262 26) on_op ">="))
 (Token ((262 28) on_sp " "))
 (Token ((262 29) on_ivar "@max_size"))
 (Token ((262 38) on_nl "\n"))
 (Token ((263 0) on_sp "      "))
 (Token ((263 6) on_ident "allocated"))
 (Token ((263 15) on_lparen "("))
 (Token ((263 16) on_ident "server"))
 (Token ((263 22) on_rparen ")"))
 (Token ((263 23) on_period "."))
 (Token ((263 24) on_ident "to_a"))
 (Token ((263 28) on_period "."))
 (Token ((263 29) on_ident "each"))
 (Token ((263 33) on_lbrace "{"))
 (Token ((263 34) on_op "|"))
 (Token ((263 35) on_ident "t"))
 (Token ((263 36) on_comma ","))
 (Token ((263 37) on_sp " "))
 (Token ((263 38) on_ident "c"))
 (Token ((263 39) on_op "|"))
 (Token ((263 40) on_sp " "))
 (Token ((263 41) on_ident "release"))
 (Token ((263 48) on_lparen "("))
 (Token ((263 49) on_ident "t"))
 (Token ((263 50) on_comma ","))
 (Token ((263 51) on_sp " "))
 (Token ((263 52) on_ident "c"))
 (Token ((263 53) on_comma ","))
 (Token ((263 54) on_sp " "))
 (Token ((263 55) on_ident "server"))
 (Token ((263 61) on_rparen ")"))
 (Token ((263 62) on_sp " "))
 (Token ((263 63) on_kw "unless"))
 (Token ((263 69) on_sp " "))
 (Token ((263 70) on_ident "t"))
 (Token ((263 71) on_period "."))
 (Token ((263 72) on_ident "alive?"))
 (Token ((263 78) on_rbrace "}"))
 (Token ((263 79) on_nl "\n"))
 (Token ((264 0) on_sp "      "))
 (Token ((264 6) on_ident "n"))
 (Token ((264 7) on_sp " "))
 (Token ((264 8) on_op "="))
 (Token ((264 9) on_sp " "))
 (Token ((264 10) on_kw "nil"))
 (Token ((264 13) on_nl "\n"))
 (Token ((265 0) on_sp "    "))
 (Token ((265 4) on_kw "end"))
 (Token ((265 7) on_nl "\n"))
 (Token ((266 0) on_sp "    "))
 (Token ((266 4) on_ident "default_make_new"))
 (Token ((266 20) on_lparen "("))
 (Token ((266 21) on_ident "server"))
 (Token ((266 27) on_rparen ")"))
 (Token ((266 28) on_sp " "))
 (Token ((266 29) on_kw "if"))
 (Token ((266 31) on_sp " "))
 (Token ((266 32) on_lparen "("))
 (Token ((266 33) on_ident "n"))
 (Token ((266 34) on_sp " "))
 (Token ((266 35) on_op "||"))
 (Token ((266 37) on_sp " "))
 (Token ((266 38) on_ident "size"))
 (Token ((266 42) on_lparen "("))
 (Token ((266 43) on_ident "server"))
 (Token ((266 49) on_rparen ")"))
 (Token ((266 50) on_rparen ")"))
 (Token ((266 51) on_sp " "))
 (Token ((266 52) on_op "<"))
 (Token ((266 53) on_sp " "))
 (Token ((266 54) on_ivar "@max_size"))
 (Token ((266 63) on_nl "\n"))
 (Token ((267 0) on_sp "  "))
 (Token ((267 2) on_kw "end"))
 (Token ((267 5) on_nl "\n"))
 (Token ((268 0) on_ignored_nl "\n"))
 (Token ((269 0) on_sp "  "))
 (Token
  ((269 2)
   on_comment
   "# Return the next available connection in the pool for the given server, or nil\n"))
 (Token ((270 0) on_sp "  "))
 (Token
  ((270 2)
   on_comment
   "# if there is not currently an available connection for the server.\n"))
 (Token ((271 0) on_sp "  "))
 (Token
  ((271 2)
   on_comment
   "# The calling code should already have the mutex before calling this.\n"))
 (Token ((272 0) on_sp "  "))
 (Token ((272 2) on_kw "def"))
 (Token ((272 5) on_sp " "))
 (Token ((272 6) on_ident "next_available"))
 (Token ((272 20) on_lparen "("))
 (Token ((272 21) on_ident "server"))
 (Token ((272 27) on_rparen ")"))
 (Token ((272 28) on_ignored_nl "\n"))
 (Token ((273 0) on_sp "    "))
 (Token ((273 4) on_kw "case"))
 (Token ((273 8) on_sp " "))
 (Token ((273 9) on_ivar "@connection_handling"))
 (Token ((273 29) on_nl "\n"))
 (Token ((274 0) on_sp "    "))
 (Token ((274 4) on_kw "when"))
 (Token ((274 8) on_sp " "))
 (Token ((274 9) on_symbeg ":"))
 (Token ((274 10) on_ident "stack"))
 (Token ((274 15) on_nl "\n"))
 (Token ((275 0) on_sp "      "))
 (Token ((275 6) on_ident "available_connections"))
 (Token ((275 27) on_lparen "("))
 (Token ((275 28) on_ident "server"))
 (Token ((275 34) on_rparen ")"))
 (Token ((275 35) on_period "."))
 (Token ((275 36) on_ident "pop"))
 (Token ((275 39) on_nl "\n"))
 (Token ((276 0) on_sp "    "))
 (Token ((276 4) on_kw "else"))
 (Token ((276 8) on_ignored_nl "\n"))
 (Token ((277 0) on_sp "      "))
 (Token ((277 6) on_ident "available_connections"))
 (Token ((277 27) on_lparen "("))
 (Token ((277 28) on_ident "server"))
 (Token ((277 34) on_rparen ")"))
 (Token ((277 35) on_period "."))
 (Token ((277 36) on_ident "shift"))
 (Token ((277 41) on_nl "\n"))
 (Token ((278 0) on_sp "    "))
 (Token ((278 4) on_kw "end"))
 (Token ((278 7) on_nl "\n"))
 (Token ((279 0) on_sp "  "))
 (Token ((279 2) on_kw "end"))
 (Token ((279 5) on_nl "\n"))
 (Token ((280 0) on_ignored_nl "\n"))
 (Token ((281 0) on_sp "  "))
 (Token
  ((281 2)
   on_comment
   "# Returns the connection owned by the supplied thread for the given server,\n"))
 (Token ((282 0) on_sp "  "))
 (Token
  ((282 2)
   on_comment
   "# if any. The calling code should NOT already have the mutex before calling this.\n"))
 (Token ((283 0) on_sp "  "))
 (Token ((283 2) on_kw "def"))
 (Token ((283 5) on_sp " "))
 (Token ((283 6) on_ident "owned_connection"))
 (Token ((283 22) on_lparen "("))
 (Token ((283 23) on_ident "thread"))
 (Token ((283 29) on_comma ","))
 (Token ((283 30) on_sp " "))
 (Token ((283 31) on_ident "server"))
 (Token ((283 37) on_rparen ")"))
 (Token ((283 38) on_ignored_nl "\n"))
 (Token ((284 0) on_sp "    "))
 (Token ((284 4) on_ident "sync"))
 (Token ((284 8) on_lbrace "{"))
 (Token ((284 9) on_ivar "@allocated"))
 (Token ((284 19) on_lbracket "["))
 (Token ((284 20) on_ident "server"))
 (Token ((284 26) on_rbracket "]"))
 (Token ((284 27) on_lbracket "["))
 (Token ((284 28) on_ident "thread"))
 (Token ((284 34) on_rbracket "]"))
 (Token ((284 35) on_rbrace "}"))
 (Token ((284 36) on_nl "\n"))
 (Token ((285 0) on_sp "  "))
 (Token ((285 2) on_kw "end"))
 (Token ((285 5) on_nl "\n"))
 (Token ((286 0) on_ignored_nl "\n"))
 (Token ((287 0) on_sp "  "))
 (Token
  ((287 2)
   on_comment
   "# If the server given is in the hash, return it, otherwise, return the default server.\n"))
 (Token ((288 0) on_sp "  "))
 (Token ((288 2) on_kw "def"))
 (Token ((288 5) on_sp " "))
 (Token ((288 6) on_ident "pick_server"))
 (Token ((288 17) on_lparen "("))
 (Token ((288 18) on_ident "server"))
 (Token ((288 24) on_rparen ")"))
 (Token ((288 25) on_ignored_nl "\n"))
 (Token ((289 0) on_sp "    "))
 (Token ((289 4) on_ident "sync"))
 (Token ((289 8) on_lbrace "{"))
 (Token ((289 9) on_ivar "@servers"))
 (Token ((289 17) on_lbracket "["))
 (Token ((289 18) on_ident "server"))
 (Token ((289 24) on_rbracket "]"))
 (Token ((289 25) on_rbrace "}"))
 (Token ((289 26) on_nl "\n"))
 (Token ((290 0) on_sp "  "))
 (Token ((290 2) on_kw "end"))
 (Token ((290 5) on_nl "\n"))
 (Token ((291 0) on_ignored_nl "\n"))
 (Token ((292 0) on_sp "  "))
 (Token
  ((292 2)
   on_comment
   "# Create the maximum number of connections to each server immediately.\n"))
 (Token ((293 0) on_sp "  "))
 (Token ((293 2) on_kw "def"))
 (Token ((293 5) on_sp " "))
 (Token ((293 6) on_ident "preconnect"))
 (Token ((293 16) on_nl "\n"))
 (Token ((294 0) on_sp "    "))
 (Token ((294 4) on_ident "servers"))
 (Token ((294 11) on_period "."))
 (Token ((294 12) on_ident "each"))
 (Token ((294 16) on_lbrace "{"))
 (Token ((294 17) on_op "|"))
 (Token ((294 18) on_ident "s"))
 (Token ((294 19) on_op "|"))
 (Token ((294 20) on_sp " "))
 (Token ((294 21) on_lparen "("))
 (Token ((294 22) on_ident "max_size"))
 (Token ((294 30) on_sp " "))
 (Token ((294 31) on_op "-"))
 (Token ((294 32) on_sp " "))
 (Token ((294 33) on_ident "size"))
 (Token ((294 37) on_lparen "("))
 (Token ((294 38) on_ident "s"))
 (Token ((294 39) on_rparen ")"))
 (Token ((294 40) on_rparen ")"))
 (Token ((294 41) on_period "."))
 (Token ((294 42) on_ident "times"))
 (Token ((294 47) on_lbrace "{"))
 (Token ((294 48) on_ident "checkin_connection"))
 (Token ((294 66) on_lparen "("))
 (Token ((294 67) on_ident "s"))
 (Token ((294 68) on_comma ","))
 (Token ((294 69) on_sp " "))
 (Token ((294 70) on_ident "make_new"))
 (Token ((294 78) on_lparen "("))
 (Token ((294 79) on_ident "s"))
 (Token ((294 80) on_rparen ")"))
 (Token ((294 81) on_rparen ")"))
 (Token ((294 82) on_rbrace "}"))
 (Token ((294 83) on_rbrace "}"))
 (Token ((294 84) on_nl "\n"))
 (Token ((295 0) on_sp "  "))
 (Token ((295 2) on_kw "end"))
 (Token ((295 5) on_nl "\n"))
 (Token ((296 0) on_ignored_nl "\n"))
 (Token ((297 0) on_sp "  "))
 (Token
  ((297 2)
   on_comment
   "# Releases the connection assigned to the supplied thread and server. If the\n"))
 (Token ((298 0) on_sp "  "))
 (Token
  ((298 2)
   on_comment
   "# server or connection given is scheduled for disconnection, remove the\n"))
 (Token ((299 0) on_sp "  "))
 (Token
  ((299 2)
   on_comment
   "# connection instead of releasing it back to the pool.\n"))
 (Token ((300 0) on_sp "  "))
 (Token
  ((300 2)
   on_comment
   "# The calling code should already have the mutex before calling this.\n"))
 (Token ((301 0) on_sp "  "))
 (Token ((301 2) on_kw "def"))
 (Token ((301 5) on_sp " "))
 (Token ((301 6) on_ident "release"))
 (Token ((301 13) on_lparen "("))
 (Token ((301 14) on_ident "thread"))
 (Token ((301 20) on_comma ","))
 (Token ((301 21) on_sp " "))
 (Token ((301 22) on_ident "conn"))
 (Token ((301 26) on_comma ","))
 (Token ((301 27) on_sp " "))
 (Token ((301 28) on_ident "server"))
 (Token ((301 34) on_rparen ")"))
 (Token ((301 35) on_ignored_nl "\n"))
 (Token ((302 0) on_sp "    "))
 (Token ((302 4) on_kw "if"))
 (Token ((302 6) on_sp " "))
 (Token ((302 7) on_ivar "@connections_to_remove"))
 (Token ((302 29) on_period "."))
 (Token ((302 30) on_ident "include?"))
 (Token ((302 38) on_lparen "("))
 (Token ((302 39) on_ident "conn"))
 (Token ((302 43) on_rparen ")"))
 (Token ((302 44) on_nl "\n"))
 (Token ((303 0) on_sp "      "))
 (Token ((303 6) on_ident "remove"))
 (Token ((303 12) on_lparen "("))
 (Token ((303 13) on_ident "thread"))
 (Token ((303 19) on_comma ","))
 (Token ((303 20) on_sp " "))
 (Token ((303 21) on_ident "conn"))
 (Token ((303 25) on_comma ","))
 (Token ((303 26) on_sp " "))
 (Token ((303 27) on_ident "server"))
 (Token ((303 33) on_rparen ")"))
 (Token ((303 34) on_nl "\n"))
 (Token ((304 0) on_sp "    "))
 (Token ((304 4) on_kw "else"))
 (Token ((304 8) on_ignored_nl "\n"))
 (Token ((305 0) on_sp "      "))
 (Token ((305 6) on_ident "conn"))
 (Token ((305 10) on_sp " "))
 (Token ((305 11) on_op "="))
 (Token ((305 12) on_sp " "))
 (Token ((305 13) on_ident "allocated"))
 (Token ((305 22) on_lparen "("))
 (Token ((305 23) on_ident "server"))
 (Token ((305 29) on_rparen ")"))
 (Token ((305 30) on_period "."))
 (Token ((305 31) on_ident "delete"))
 (Token ((305 37) on_lparen "("))
 (Token ((305 38) on_ident "thread"))
 (Token ((305 44) on_rparen ")"))
 (Token ((305 45) on_nl "\n"))
 (Token ((306 0) on_ignored_nl "\n"))
 (Token ((307 0) on_sp "      "))
 (Token ((307 6) on_kw "if"))
 (Token ((307 8) on_sp " "))
 (Token ((307 9) on_ivar "@connection_handling"))
 (Token ((307 29) on_sp " "))
 (Token ((307 30) on_op "=="))
 (Token ((307 32) on_sp " "))
 (Token ((307 33) on_symbeg ":"))
 (Token ((307 34) on_ident "disconnect"))
 (Token ((307 44) on_nl "\n"))
 (Token ((308 0) on_sp "        "))
 (Token ((308 8) on_ident "db"))
 (Token ((308 10) on_period "."))
 (Token ((308 11) on_ident "disconnect_connection"))
 (Token ((308 32) on_lparen "("))
 (Token ((308 33) on_ident "conn"))
 (Token ((308 37) on_rparen ")"))
 (Token ((308 38) on_nl "\n"))
 (Token ((309 0) on_sp "      "))
 (Token ((309 6) on_kw "else"))
 (Token ((309 10) on_ignored_nl "\n"))
 (Token ((310 0) on_sp "        "))
 (Token ((310 8) on_ident "checkin_connection"))
 (Token ((310 26) on_lparen "("))
 (Token ((310 27) on_ident "server"))
 (Token ((310 33) on_comma ","))
 (Token ((310 34) on_sp " "))
 (Token ((310 35) on_ident "conn"))
 (Token ((310 39) on_rparen ")"))
 (Token ((310 40) on_nl "\n"))
 (Token ((311 0) on_sp "      "))
 (Token ((311 6) on_kw "end"))
 (Token ((311 9) on_nl "\n"))
 (Token ((312 0) on_sp "    "))
 (Token ((312 4) on_kw "end"))
 (Token ((312 7) on_nl "\n"))
 (Token ((313 0) on_sp "  "))
 (Token ((313 2) on_kw "end"))
 (Token ((313 5) on_nl "\n"))
 (Token ((314 0) on_ignored_nl "\n"))
 (Token ((315 0) on_sp "  "))
 (Token
  ((315 2)
   on_comment
   "# Removes the currently allocated connection from the connection pool. The\n"))
 (Token ((316 0) on_sp "  "))
 (Token
  ((316 2)
   on_comment
   "# calling code should already have the mutex before calling this.\n"))
 (Token ((317 0) on_sp "  "))
 (Token ((317 2) on_kw "def"))
 (Token ((317 5) on_sp " "))
 (Token ((317 6) on_ident "remove"))
 (Token ((317 12) on_lparen "("))
 (Token ((317 13) on_ident "thread"))
 (Token ((317 19) on_comma ","))
 (Token ((317 20) on_sp " "))
 (Token ((317 21) on_ident "conn"))
 (Token ((317 25) on_comma ","))
 (Token ((317 26) on_sp " "))
 (Token ((317 27) on_ident "server"))
 (Token ((317 33) on_rparen ")"))
 (Token ((317 34) on_ignored_nl "\n"))
 (Token ((318 0) on_sp "    "))
 (Token ((318 4) on_ivar "@connections_to_remove"))
 (Token ((318 26) on_period "."))
 (Token ((318 27) on_ident "delete"))
 (Token ((318 33) on_lparen "("))
 (Token ((318 34) on_ident "conn"))
 (Token ((318 38) on_rparen ")"))
 (Token ((318 39) on_nl "\n"))
 (Token ((319 0) on_sp "    "))
 (Token ((319 4) on_ident "allocated"))
 (Token ((319 13) on_lparen "("))
 (Token ((319 14) on_ident "server"))
 (Token ((319 20) on_rparen ")"))
 (Token ((319 21) on_period "."))
 (Token ((319 22) on_ident "delete"))
 (Token ((319 28) on_lparen "("))
 (Token ((319 29) on_ident "thread"))
 (Token ((319 35) on_rparen ")"))
 (Token ((319 36) on_sp " "))
 (Token ((319 37) on_kw "if"))
 (Token ((319 39) on_sp " "))
 (Token ((319 40) on_ivar "@servers"))
 (Token ((319 48) on_period "."))
 (Token ((319 49) on_ident "include?"))
 (Token ((319 57) on_lparen "("))
 (Token ((319 58) on_ident "server"))
 (Token ((319 64) on_rparen ")"))
 (Token ((319 65) on_nl "\n"))
 (Token ((320 0) on_sp "    "))
 (Token ((320 4) on_ident "db"))
 (Token ((320 6) on_period "."))
 (Token ((320 7) on_ident "disconnect_connection"))
 (Token ((320 28) on_lparen "("))
 (Token ((320 29) on_ident "conn"))
 (Token ((320 33) on_rparen ")"))
 (Token ((320 34) on_nl "\n"))
 (Token ((321 0) on_sp "  "))
 (Token ((321 2) on_kw "end"))
 (Token ((321 5) on_nl "\n"))
 (Token ((322 0) on_ignored_nl "\n"))
 (Token ((323 0) on_sp "  "))
 (Token ((323 2) on_const "CONNECTION_POOL_MAP"))
 (Token ((323 21) on_lbracket "["))
 (Token ((323 22) on_lbracket "["))
 (Token ((323 23) on_kw "false"))
 (Token ((323 28) on_comma ","))
 (Token ((323 29) on_sp " "))
 (Token ((323 30) on_kw "true"))
 (Token ((323 34) on_rbracket "]"))
 (Token ((323 35) on_rbracket "]"))
 (Token ((323 36) on_sp " "))
 (Token ((323 37) on_op "="))
 (Token ((323 38) on_sp " "))
 (Token ((323 39) on_kw "self"))
 (Token ((323 43) on_nl "\n"))
 (Token ((324 0) on_kw "end"))
 (Token ((324 3) on_nl "\n")))
