((Token ((1 0) on_tstring_beg "%Q("))
 (Token ((1 3) on_tstring_content "1 + 1 is "))
 (Token ((1 12) on_embexpr_beg "\\#{"))
 (Token ((1 14) on_int "1"))
 (Token ((1 15) on_sp " "))
 (Token ((1 16) on_op "+"))
 (Token ((1 17) on_sp " "))
 (Token ((1 18) on_int "1"))
 (Token ((1 19) on_embexpr_end "}"))
 (Token ((1 20) on_tstring_end ")"))
 (Token ((1 21) on_sp " "))
 (Token ((1 22) on_comment "# => \\\"1 + 1 is 2\\\"\\n"))
 (Token ((2 0) on_tstring_beg "%q("))
 (Token ((2 3) on_tstring_content "1 + 1 is \\#{1 + 1}"))
 (Token ((2 20) on_tstring_end ")"))
 (Token ((2 21) on_sp " "))
 (Token ((2 22) on_comment "# => '1 + 1 is \\#{1 + 1}'\\n"))
 (Token ((3 0) on_ident "expected"))
 (Token ((3 8) on_sp " "))
 (Token ((3 9) on_op "="))
 (Token ((3 10) on_sp " "))
 (Token ((3 11) on_heredoc_beg "<<HEREDOC"))
 (Token ((3 20) on_nl "\\n"))
 (Token
  ((4 0)
   on_tstring_content
   "This is long text that spans so many freaking lines.\\n\\nNote the line above is blank.\\n\\nAlso odd, is that the identifiers for these \\\"heredoc\\\" do not heredoc have to be 'uppercase'.\\n\\n"))
 (Token ((10 0) on_heredoc_end "HEREDOC\\n"))
 (Token ((11 0) on_ignored_nl "\\n"))
 (Token ((12 0) on_ident "heredoc2"))
 (Token ((12 8) on_sp " "))
 (Token ((12 9) on_op "="))
 (Token ((12 10) on_sp " "))
 (Token ((12 11) on_heredoc_beg "<<HEREDOC2"))
 (Token ((12 21) on_nl "\\n"))
 (Token ((13 0) on_tstring_content "Note how "))
 (Token ((13 9) on_embexpr_beg "\\#{"))
 (Token ((13 11) on_int "1"))
 (Token ((13 12) on_sp " "))
 (Token ((13 13) on_op "+"))
 (Token ((13 14) on_sp " "))
 (Token ((13 15) on_int "1"))
 (Token ((13 16) on_embexpr_end "}"))
 (Token ((13 17) on_tstring_content " shows as 2.\\n"))
 (Token ((14 0) on_heredoc_end "HEREDOC2\\n"))
 (Token ((15 0) on_ignored_nl "\\n"))
 (Token ((16 0) on_ident "heredoc3"))
 (Token ((16 8) on_sp " "))
 (Token ((16 9) on_op "="))
 (Token ((16 10) on_sp " "))
 (Token ((16 11) on_heredoc_beg "<<'NONESCAPE'"))
 (Token ((16 24) on_nl "\\n"))
 (Token ((17 0) on_tstring_content "Note how \\#{1 + 1} is not escaped.\\n"))
 (Token ((18 0) on_heredoc_end "NONESCAPE\\n"))
 (Token ((19 0) on_ignored_nl "\\n"))
 (Token ((20 0) on_ident "heredoc4"))
 (Token ((20 8) on_sp " "))
 (Token ((20 9) on_op "="))
 (Token ((20 10) on_sp " "))
 (Token ((20 11) on_heredoc_beg "<<f"))
 (Token ((20 14) on_nl "\\n"))
 (Token ((21 0) on_tstring_content "This is kind of weird?\\n"))
 (Token ((22 0) on_heredoc_end "f\\n"))
 (Token ((23 0) on_ignored_nl "\\n"))
 (Token ((24 0) on_ident "indenteddoc"))
 (Token ((24 11) on_sp " "))
 (Token ((24 12) on_op "="))
 (Token ((24 13) on_sp " "))
 (Token ((24 14) on_heredoc_beg "<<-GOGOGO"))
 (Token ((24 23) on_nl "\\n"))
 (Token
  ((25 0)
   on_tstring_content
   "This still expects left flush\\n  that tab will prob get captured\\n"))
 (Token ((27 0) on_heredoc_end "GOGOGO\\n"))
 (Token ((28 0) on_ignored_nl "\\n"))
 (Token ((29 0) on_ident "backticks"))
 (Token ((29 9) on_sp " "))
 (Token ((29 10) on_op "="))
 (Token ((29 11) on_sp " "))
 (Token ((29 12) on_heredoc_beg "<<-`LONGSHELLCODE`"))
 (Token ((29 30) on_nl "\\n"))
 (Token ((30 0) on_tstring_content "cat "))
 (Token ((30 4) on_embexpr_beg "\\#{"))
 (Token ((30 6) on_kw "__FILE__"))
 (Token ((30 14) on_embexpr_end "}"))
 (Token ((30 15) on_tstring_content "\\n"))
 (Token ((31 0) on_heredoc_end "LONGSHELLCODE\\n"))
 (Token ((32 0) on_ignored_nl "\\n"))
 (Token ((33 0) on_ident "str"))
 (Token ((33 3) on_sp " "))
 (Token ((33 4) on_op "="))
 (Token ((33 5) on_sp " "))
 (Token ((33 6) on_tstring_beg "\\\""))
 (Token ((33 7) on_tstring_content "note"))
 (Token ((33 11) on_tstring_end "\\\""))
 (Token ((33 12) on_sp " "))
 (Token ((33 13) on_tstring_beg "\\\""))
 (Token ((33 14) on_tstring_content " how"))
 (Token ((33 18) on_tstring_end "\\\""))
 (Token ((33 19) on_sp " "))
 (Token ((33 20) on_tstring_beg "\\\""))
 (Token ((33 21) on_tstring_content " these"))
 (Token ((33 27) on_tstring_end "\\\""))
 (Token ((33 28) on_sp " "))
 (Token ((33 29) on_tstring_beg "\\\""))
 (Token ((33 30) on_tstring_content " string"))
 (Token ((33 37) on_tstring_end "\\\""))
 (Token ((33 38) on_sp " "))
 (Token ((33 39) on_tstring_beg "\\\""))
 (Token ((33 40) on_tstring_content " are"))
 (Token ((33 44) on_tstring_end "\\\""))
 (Token ((33 45) on_sp " "))
 (Token ((33 46) on_tstring_beg "\\\""))
 (Token ((33 47) on_tstring_content " concatenated!"))
 (Token ((33 61) on_tstring_end "\\\""))
 (Token ((33 62) on_nl "\\n"))
 (Token ((34 0) on_ident "puts"))
 (Token ((34 4) on_sp " "))
 (Token ((34 5) on_ident "str"))
 (Token ((34 8) on_nl "\\n"))
 (Token ((35 0) on_ignored_nl "\\n"))
 (Token ((36 0) on_ident "str2"))
 (Token ((36 4) on_sp " "))
 (Token ((36 5) on_op "="))
 (Token ((36 6) on_sp " "))
 (Token ((36 7) on_tstring_beg "%q{"))
 (Token ((36 10) on_tstring_content "see how "))
 (Token ((36 18) on_tstring_end "}"))
 (Token ((36 19) on_sp " "))
 (Token ((36 20) on_tstring_beg "\\\""))
 (Token ((36 21) on_tstring_content "this is also "))
 (Token ((36 34) on_tstring_end "\\\""))
 (Token ((36 35) on_sp " "))
 (Token ((36 36) on_tstring_beg "'"))
 (Token ((36 37) on_tstring_content "valid?"))
 (Token ((36 43) on_tstring_end "'"))
 (Token ((36 44) on_nl "\\n"))
 (Token ((37 0) on_ident "puts"))
 (Token ((37 4) on_sp " "))
 (Token ((37 5) on_ident "str2"))
 (Token ((37 9) on_nl "\\n")))
